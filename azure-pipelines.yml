# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
  - script: docker build -t template_$(Build.BuildId) .
    displayName: 'build the code'
  - script: docker run --name=template-test-$(Build.BuildId) template_$(Build.BuildId) 
    displayName: 'run the tests'

  - script: docker cp template-test-$(Build.BuildId):/usr/src/template/build_tmp/Testing .
    displayName: 'copy the test results'
  
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: '**/Testing/*/Test.xml'

  - script: |
      git clone --depth 1 -b gh-pages https://$GH_TOKEN@github.com/XiangpengHao/cpp-template.git gh-pages
      cat $GH_TOKEN
      echo $(Build.SourceVersion) $(Build.BuildId) 100 > ./public/bench_data
      cp ./gh-pages/data.json ./public/
      cp ./public/* ./gh-pages
      cd gh-pages 
      python3 ./data_process.py
      git config user.email "ci@haoxp.xyz"
      git config user.name "cibot"
      git add .
      git commit -m"update benchmark result"
      git push origin gh-pages --force

    env:
      GH_TOKEN: $(GITHUB_TOKEN)

  - script: docker rm template-test-$(Build.BuildId) 
    displayName: 'clean the image'
    condition: always()

  - script: docker rmi template_$(Build.BuildId) --force
    displayName: 'clean the container'
    condition: always()
